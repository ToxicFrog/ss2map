#!/usr/bin/env lua
require 'util'
local DB = require 'db'
local mapgen = require 'mapgen'
local html_mode = os.getenv('MISMAP_MODE') == 'html'

flags.register('help', 'h', '?') {
  help = 'display this text';
}

flags.register('gamesys') {
  help = 'path to gamesys, e.g. shock.gam';
  type = flags.string;
}

flags.register('proplist') {
  help = 'path to proplist.txt generated by in-game :dump_props_full command';
  type = flags.string;
}

if html_mode then
  flags.registered.gamesys.required = true
  flags.registered.proplist.required = true

  flags.register('genimages') {
    help = 'generate terrain images. This is very expensive so if the terrain hasn\'t changed consider turning it off.';
    default = true;
  }

  flags.register('renderscale') {
    help = 'Scale the HTML map to this value';
    type = flags.number;
    default = 4.0;
  }

  flags.register('html-in') {
    help = 'Path to the static and template files used to generate the HTML maps.';
    type = flags.string;
    required = true;
  }

  flags.register('html-out') {
    help = 'Directory to write HTML maps to. It must already exist.';
    type = flags.string;
    required = true;
  }

  -- currently disabled, may be reinstated later
  -- flags.register('rotatehack') {
  --   help = 'Rotate the view of the map so it matches up with the in-game compass and automap rather than with ShockEd'
  -- }

end


local function main(...)
  local result,args = pcall(flags.parse, {...})
  if not result or args.help or #args < 1 then
    if not result then print(args..'\n') end
    print('Usage: mismap [flags] [--gamesys=shock.gam] [--proplist=proplist.txt] map.mis')
    print(flags.help())
    os.exit(1)
  end

  local db = DB.new()

  if args.proplist then
    print('PROPS', args.proplist)
    db:load_proplist(args.proplist)
  else
    print('WARNING: no --proplist specified, entity property data will be unavailable')
  end

  if args.gamesys then
    print('GAMESYS', args.gamesys)
    db:load(args.gamesys)
  else
    print('WARNING: no --gamesys specified, archetype data will be unavailable')
  end

  local maps = {}
  for i,mis in ipairs(args) do
    print('MAP', mis)
    maps[i] = db:clone()
    maps[i]:load(mis)
    maps[i].name = mis
  end

  if html_mode then
    mapgen(maps)
    os.exit(0)
  end

  return maps
end

if love then
  require 'love2d' (main)
else
  return main(...)
end
