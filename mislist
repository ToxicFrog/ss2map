#!/usr/bin/env lua
--[[

  mislist -- lister for mission file contents

]]

require 'util'
local db = require 'db'
local proplist = require 'db.proplist'

flags.register('help', 'h', '?') {
  help = 'display this text';
}

flags.register('gamesys') {
  help = 'path to gamesys, e.g. shock.gam';
  type = flags.string;
}

flags.register('proplist') {
  help = 'path to proplist.txt generated by in-game :dump_props_full command';
  type = flags.string;
}

flags.register('objects') {
  help = 'list all objects in the loaded map';
  default = true;
}

flags.register('props') {
  help = 'list all object properties, not just name/position';
}

flags.register('inherited') {
  help = 'when listing object properties, include inherited properties';
}

flags.register('links') {
  help = 'list all object links';
}

local function typeChain(mis, id)
  local chain = {}
  while id do
    local name = mis:getProp(id, 'SymName')
    if name then
      table.insert(chain, name)
      chain[name] = true
    end
    id = mis:derefLink(id, 'MetaProp')
  end
  return chain
end

local function loadDB(args)
  if args.proplist then
    print('PROPS', args.proplist)
    proplist.load(args.proplist)
  else
    print('WARNING: no --proplist specified, entity property data will be unavailable')
  end

  local db = db.new()
  if args.gamesys then
    print('GAMESYS', args.gamesys)
    db:load(args.gamesys)
  end
  print('MIS', args[1])
  db:load(args[1])

  return db
end

local function printObj(db, obj, pos, rot)
  printf('%s @ (%.2f,%.2f,%.2f) ϴ° (H:%d P:%d B:%d)\n',
    tostring(obj),
    pos.x, pos.y, pos.z,
    rot.z * 180, rot.y * 180, rot.x * 180)
  -- FIXME: this needs to handle branching inheritance chains
  -- local types = typeChain(mis, brush.primal)
  -- if #types > 1 then
  --   printf('  Types: %s\n', table.concat(types, ' <- '))
  -- end
end

local function listObjs(db, props, metaprops, links)
  for id,brush in db:objects('brush') do
    -- Skip everything that isn't an object placement brush.
    if brush.type ~= -3 then goto continue end
    local obj = db:object(brush.primal)
    printObj(db, obj, brush.position, brush.rotation)

    if links then
      print('  Links:')
      for link in obj:getLinks() do
        printf('    %s\n', link)
      end
    end

    if props then
      local src = obj
      print('  Properties:')
      for prop in obj:getProperties(metaprops) do
        if prop.obj ~= src then
          src = prop.obj
          printf('  via %s:\n', src)
        end
        printf('    %s: %s\n', prop.key, prop.value)
      end
    end

    ::continue::
  end
end

local function main(...)
  local args = flags.parse {...}
  if args.help or #args < 1 then
    print('Usage: mismap [flags] [--gamesys=shock.gam] map.mis')
    print(flags.help())
    os.exit(1)
  end

  local db = loadDB(args)
  listObjs(db, args.props, args.inherited, args.links)
end

return main(...)
