#!/usr/bin/env lua
--[[

  mislist -- lister for mission file contents

]]

require 'util'
local tagfile = require 'db.tagfile'
local proplist = require 'db.proplist'

flags.register('help', 'h', '?') {
  help = 'display this text';
}

flags.register('gamesys') {
  help = 'path to gamesys, e.g. shock.gam';
  type = flags.string;
}

flags.register('proplist') {
  help = 'path to proplist.txt generated by in-game :dump_props_full command';
  type = flags.string;
}

flags.register('objects') {
  help = 'list all objects in the loaded map';
  default = true;
}

flags.register('props') {
  help = 'list all object properties, not just name/position';
}

flags.register('inherited') {
  help = 'when listing object properties, include inherited properties';
}

flags.register('links') {
  help = 'list all object links';
}

local function typeChain(mis, id)
  local chain = {}
  while id do
    local name = mis:getProp(id, 'SymName')
    if name then
      table.insert(chain, name)
      chain[name] = true
    end
    id = mis:derefLink(id, 'MetaProp')
  end
  return chain
end

local function listobjs(mis, props, include_metaprops)
  for id,brush in pairs(mis.chunks.BRLIST.by_type[-3]) do
    local pos = brush.position
    local rot = brush.rotation
    local name = mis:getProp(brush.primal, 'SymName', true)
    printf('[%10d] %s @ (%.2f,%.2f,%.2f) ϴ° (H:%d P:%d B:%d)\n',
        brush.primal, name, pos.x, pos.y, pos.z,
        rot.z * 180, rot.y * 180, rot.x * 180)
    local types = typeChain(mis, brush.primal)
    if #types > 1 then
      printf('  Types: %s\n', table.concat(types, ' <- '))
    end
    if props then
      for k,v,inherited in mis:propPairs(brush.primal, include_metaprops) do
        printf('  %s %-16s %s\n', inherited and '+' or ' ', k..':', v)
      end
    end
    if flags.parsed.links then
      for type,dst in pairs(mis.links[brush.primal]) do
        printf('  -> %s %d\n', type, dst)
      end
    end
  end
end

local function main(...)
  local args = flags.parse {...}
  if args.help or #args < 1 then
    print('Usage: mismap [flags] [--gamesys=shock.gam] map.mis')
    print(flags.help())
    os.exit(1)
  end

  if args.proplist then
    proplist.load(args.proplist)
  else
    print('WARNING: no --proplist specified, entity property data will be unavailable')
  end

  local gam; if args.gamesys then gam = tagfile(args.gamesys) end
  local mis = tagfile(args[1], gam)

  if args.objects then
    listobjs(mis, args.props, args.inherited)
  end

  return mis
end

return main(...)
